
//! Autogenerated weights for `pallet_collectables`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2024-12-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Talless-MacBook-Pro-M2.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/solochain-template-node
// benchmark
// pallet
// --pallet
// pallet_collectables
// --extrinsic=*
// --chain=dev
// --output
// pallets/collectables/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_collectables`.
pub trait WeightInfo {
	fn create_kitty() -> Weight;
	fn transfer() -> Weight;
	fn set_price() -> Weight;
	fn buy_kitty() -> Weight;
}

/// Weights for `pallet_collectables` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `System::ParentHash` (r:1 w:0)
	/// Proof: `System::ParentHash` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `CollectablesModule::CountForKitties` (r:1 w:1)
	/// Proof: `CollectablesModule::CountForKitties` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollectablesModule::Kitties` (r:1 w:1)
	/// Proof: `CollectablesModule::Kitties` (`max_values`: None, `max_size`: Some(129), added: 2604, mode: `MaxEncodedLen`)
	/// Storage: `CollectablesModule::KittiesOwned` (r:1 w:1)
	/// Proof: `CollectablesModule::KittiesOwned` (`max_values`: None, `max_size`: Some(3250), added: 5725, mode: `MaxEncodedLen`)
	fn create_kitty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `6715`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 6715)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CollectablesModule::Kitties` (r:1 w:1)
	/// Proof: `CollectablesModule::Kitties` (`max_values`: None, `max_size`: Some(129), added: 2604, mode: `MaxEncodedLen`)
	/// Storage: `CollectablesModule::KittiesOwned` (r:2 w:2)
	/// Proof: `CollectablesModule::KittiesOwned` (`max_values`: None, `max_size`: Some(3250), added: 5725, mode: `MaxEncodedLen`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `313`
		//  Estimated: `12440`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 12440)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CollectablesModule::Kitties` (r:1 w:1)
	/// Proof: `CollectablesModule::Kitties` (`max_values`: None, `max_size`: Some(129), added: 2604, mode: `MaxEncodedLen`)
	fn set_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `241`
		//  Estimated: `3594`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 3594)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollectablesModule::Kitties` (r:1 w:1)
	/// Proof: `CollectablesModule::Kitties` (`max_values`: None, `max_size`: Some(129), added: 2604, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `CollectablesModule::KittiesOwned` (r:2 w:2)
	/// Proof: `CollectablesModule::KittiesOwned` (`max_values`: None, `max_size`: Some(3250), added: 5725, mode: `MaxEncodedLen`)
	fn buy_kitty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `432`
		//  Estimated: `12440`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(53_000_000, 12440)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `System::ParentHash` (r:1 w:0)
	/// Proof: `System::ParentHash` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `CollectablesModule::CountForKitties` (r:1 w:1)
	/// Proof: `CollectablesModule::CountForKitties` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollectablesModule::Kitties` (r:1 w:1)
	/// Proof: `CollectablesModule::Kitties` (`max_values`: None, `max_size`: Some(129), added: 2604, mode: `MaxEncodedLen`)
	/// Storage: `CollectablesModule::KittiesOwned` (r:1 w:1)
	/// Proof: `CollectablesModule::KittiesOwned` (`max_values`: None, `max_size`: Some(3250), added: 5725, mode: `MaxEncodedLen`)
	fn create_kitty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `6715`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 6715)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CollectablesModule::Kitties` (r:1 w:1)
	/// Proof: `CollectablesModule::Kitties` (`max_values`: None, `max_size`: Some(129), added: 2604, mode: `MaxEncodedLen`)
	/// Storage: `CollectablesModule::KittiesOwned` (r:2 w:2)
	/// Proof: `CollectablesModule::KittiesOwned` (`max_values`: None, `max_size`: Some(3250), added: 5725, mode: `MaxEncodedLen`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `313`
		//  Estimated: `12440`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 12440)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CollectablesModule::Kitties` (r:1 w:1)
	/// Proof: `CollectablesModule::Kitties` (`max_values`: None, `max_size`: Some(129), added: 2604, mode: `MaxEncodedLen`)
	fn set_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `241`
		//  Estimated: `3594`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 3594)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollectablesModule::Kitties` (r:1 w:1)
	/// Proof: `CollectablesModule::Kitties` (`max_values`: None, `max_size`: Some(129), added: 2604, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `CollectablesModule::KittiesOwned` (r:2 w:2)
	/// Proof: `CollectablesModule::KittiesOwned` (`max_values`: None, `max_size`: Some(3250), added: 5725, mode: `MaxEncodedLen`)
	fn buy_kitty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `432`
		//  Estimated: `12440`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(53_000_000, 12440)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
